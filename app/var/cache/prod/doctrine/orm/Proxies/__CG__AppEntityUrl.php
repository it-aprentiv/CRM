<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Url extends \App\Entity\Url implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idb', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idContact', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idbContact', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'url', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idTypeUrl', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idbTypeUrl', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'remarque', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'principal', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'dateAdd', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idUserAdd', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'dateMaj', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idUserMaj', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'statutRst', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'remarques'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idb', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idContact', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idbContact', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'url', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idTypeUrl', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idbTypeUrl', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'remarque', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'principal', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'dateAdd', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idUserAdd', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'dateMaj', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'idUserMaj', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'statutRst', '' . "\0" . 'App\\Entity\\Url' . "\0" . 'remarques'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Url $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdb(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdb', []);

        return parent::getIdb();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdb(?int $idb): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdb', [$idb]);

        parent::setIdb($idb);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdContact()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdContact', []);

        return parent::getIdContact();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdContact(?int $idContact): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdContact', [$idContact]);

        parent::setIdContact($idContact);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdbContact()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdbContact', []);

        return parent::getIdbContact();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdbContact(?int $idbContact): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdbContact', [$idbContact]);

        parent::setIdbContact($idbContact);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl(?string $url): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdTypeUrl(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdTypeUrl', []);

        return parent::getIdTypeUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdTypeUrl(?int $idTypeUrl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdTypeUrl', [$idTypeUrl]);

        parent::setIdTypeUrl($idTypeUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdbTypeUrl(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdbTypeUrl', []);

        return parent::getIdbTypeUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdbTypeUrl(?int $idbTypeUrl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdbTypeUrl', [$idbTypeUrl]);

        parent::setIdbTypeUrl($idbTypeUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemarque(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemarque', []);

        return parent::getRemarque();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemarque(?string $remarque): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemarque', [$remarque]);

        parent::setRemarque($remarque);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrincipal(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrincipal', []);

        return parent::getPrincipal();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrincipal(?string $principal): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrincipal', [$principal]);

        parent::setPrincipal($principal);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateAdd(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateAdd', []);

        return parent::getDateAdd();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateAdd(?\DateTime $dateAdd): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateAdd', [$dateAdd]);

        parent::setDateAdd($dateAdd);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdUserAdd(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdUserAdd', []);

        return parent::getIdUserAdd();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdUserAdd(?int $idUserAdd): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdUserAdd', [$idUserAdd]);

        parent::setIdUserAdd($idUserAdd);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateMaj(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateMaj', []);

        return parent::getDateMaj();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateMaj(?\DateTime $dateMaj): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateMaj', [$dateMaj]);

        parent::setDateMaj($dateMaj);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdUserMaj(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdUserMaj', []);

        return parent::getIdUserMaj();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdUserMaj(?int $idUserMaj): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdUserMaj', [$idUserMaj]);

        parent::setIdUserMaj($idUserMaj);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatutRst(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatutRst', []);

        return parent::getStatutRst();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatutRst(?bool $statutRst): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatutRst', [$statutRst]);

        parent::setStatutRst($statutRst);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemarques(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemarques', []);

        return parent::getRemarques();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemarques(?string $remarques): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemarques', [$remarques]);

        parent::setRemarques($remarques);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
